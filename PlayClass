import java.io.IOException;
import java.util.Scanner;
import org.apache.commons.lang3.StringUtils;

public class PlayBody {
	String[] gallows = drawGallows();

	public void Start(int difficulty) {
		
		/*
		 * Just to test if the code works
		 */
		
		String word = "Germany";
		String hint = "Europe";
		String guess = "";
		String lettersUsed = "";
		int timesTried = 0;

		/*
		 * Depending on the difficulty, chosen by the user, there will be a
		 * different scenario. TimesTried will not always be the same and the
		 * first screen with the gallows will also be different in the three
		 * cases.
		 */
		if (timesTried == 10) {

			// Cal the Lose() method

		} else {
			if (difficulty == 1) {
				timesTried = 0;
				System.out.println(gallows[0]);
			} else if (difficulty == 2) {
				timesTried = 3;
				System.out.println(gallows[3]);
			} else if (difficulty == 3) {
				timesTried = 5;
				System.out.println(gallows[5]);
			}
			for (int i = 0; i < word.length(); i++) {
				guess += "-";
			}
			char guessToChArr[] = guess.toCharArray();
			char wordToChArr[] = word.toCharArray();

			for (int j = 0; j < guessToChArr.length; j++) {
				System.out.print(guessToChArr[j]);
			}
			System.out.println();
			
			/*
			 * Vikane na metoda Guess
			 */

			Guess(timesTried, word, hint, difficulty, guessToChArr,
					wordToChArr, gallows, lettersUsed);			

		}
	}


	public void Guess(int timesTried, String word, String hint,
			int difficulty, char guessToChArr[], char wordToChArr[],
			String[] gallows, String lettersUsed) {

		String guessWord = new String(guessToChArr);

		if (guessWord == word) {

			// vikane na metoda Win

		} else if (timesTried == 10) {

			// Cal the Lose() method

		} else {

			/*
			 * If the chosen diff is 3, there won't be any hint, else for Diff 1
			 * and 2 there will be a hint
			 */
			if (difficulty == 3) {
				System.out.print("Enter a letter: ");
			} else {
				System.out.print("Enter a letter(" + hint + "): ");
			}
			Scanner input = new Scanner(System.in);
			char letter = input.next().charAt(0);
			if (word.contains(Character.toString(letter))) {
				for (int i = 0; i < word.length(); i++) {

					if (wordToChArr[i] == letter) {
						guessToChArr[i] = letter;
					}
				}
			} else {
				timesTried += 1;
				System.out.println();
				System.out.println("Wrong letter !");
			}
			if (lettersUsed.contains(Character.toString(letter))) {

			} else {
				lettersUsed += letter + ", ";
			}

			// Clear console here
			for (int i = 0; i < 15; i++) {
				System.out.println();
			}

			System.out.println();
			System.out.println(gallows[timesTried]);
			System.out.println();
			System.out.print("Letters used: " + lettersUsed);
			System.out.println("\n");
			for (int i = 0; i < guessToChArr.length; i++) {
				System.out.print(guessToChArr[i]);
			}
			System.out.println();
			Guess(timesTried, word, hint, difficulty, guessToChArr,
					wordToChArr, gallows, lettersUsed);

		}

	}
	
//	public void Lose()
//    {
//      Scanner input1 = new Scanner(System.in);
//      System.out.print("\nPlay Again?(Y/N): ");
//      String pa1 = input1.next();
//      if(pa1.contains("y") || pa1.contains("Y"))
//      {
//        System.out.print("\nDifficulty(1-3): ");
//        int difficulty = input1.nextInt();
//        Start(difficulty);
//      }else{
//      }
//    }

	private String[] drawGallows() {
		String gallows[] = new String[11];
		String dashes = StringUtils.repeat("-", 6); // The base of the gallows.

		gallows[0] = "";
		gallows[1] = StringUtils.repeat("\n", 6) + dashes;
		gallows[2] = StringUtils.repeat(" |\n", 6) + dashes;
		gallows[3] = " |---\n" + StringUtils.repeat(" |\n", 5) + dashes;
		gallows[4] = " |---\n |  |\n" + StringUtils.repeat(" |\n", 4) + dashes;
		gallows[5] = " |---\n |  |\n |  o\n" + StringUtils.repeat(" |\n", 3)
				+ dashes;
		gallows[6] = " |---\n |  |\n |  o\n |  |\n"
				+ StringUtils.repeat(" |\n", 2) + dashes;
		gallows[7] = " |---\n |  |\n |  o\n | /|\n"
				+ StringUtils.repeat(" |\n", 2) + dashes;
		gallows[8] = " |---\n |  |\n |  o\n | /|\\\n"
				+ StringUtils.repeat(" |\n", 2) + dashes;
		gallows[9] = " |---\n |  |\n |  o\n | /|\\\n | /\n"
				+ StringUtils.repeat(" |\n", 1) + dashes;
		gallows[10] = " |---\n |  |\n |  o\n | /|\\\n | / \\\n"
				+ StringUtils.repeat(" |\n", 1) + dashes;
		return gallows;
	}
}
